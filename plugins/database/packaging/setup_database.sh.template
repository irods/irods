#!/bin/bash -e

# templated variables
DATABASETYPE="TEMPLATE_DATABASE_TYPE"
DEFAULT_DATABASEPORT="TEMPLATE_DEFAULT_DATABASEPORT"

# config
IRODS_CONFIG_FILE="TEMPLATE_DEFAULT_IRODSCONFIG"
SETUP_DATABASE_FLAG="/tmp/$USER/setup_database.flag"

# get into the top level directory
DETECTEDDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ -e /etc/irods/server.config ] ;  then
    cd $DETECTEDDIR/../
else
    cd $DETECTEDDIR/../../../
fi

#
# Detect run-in-place installation
#
set +e
source ./packaging/setup_runinplace.sh 2> /dev/null
set -e

# get temp file from prior run, if it exists
mkdir -p /tmp/$USER
if [ -f $SETUP_DATABASE_FLAG ] ; then
    # have run this before, read the existing config file
    DATABASEHOSTORIP=`grep "DATABASE_HOST =" $IRODS_CONFIG_FILE | awk -F\' '{print $2}'`
    DATABASEPORT=`grep "DATABASE_PORT =" $IRODS_CONFIG_FILE | awk -F\' '{print $2}'`
    DATABASENAME=`grep "DB_NAME =" $IRODS_CONFIG_FILE | awk -F\' '{print $2}'`
    DATABASEUSER=`grep "DATABASE_ADMIN_NAME =" $IRODS_CONFIG_FILE | awk -F\' '{print $2}'`
    STATUS="loop"
else
    # no temp file, this is the first run
    STATUS="firstpass"
fi

echo "==================================================================="
echo ""
echo "You are installing an iRODS database plugin."
echo ""
echo "The iRODS server cannot be started until its database"
echo "has been properly configured."
echo ""
while [ "$STATUS" != "complete" ] ; do

  # set default values from an earlier loop
  if [ "$STATUS" != "firstpass" ] ; then
    LASTDATABASEHOSTORIP=$DATABASEHOSTORIP
    LASTDATABASEPORT=$DATABASEPORT
    LASTDATABASENAME=$DATABASENAME
    LASTDATABASEUSER=$DATABASEUSER
  fi

  # get host
  echo -n "Database server's hostname or IP address"
  if [ "$LASTDATABASEHOSTORIP" ] ; then echo -n " [$LASTDATABASEHOSTORIP]"; fi
  echo -n ": "
  read DATABASEHOSTORIP
  if [ "$DATABASEHOSTORIP" == "" ] ; then
    if [ "$LASTDATABASEHOSTORIP" ] ; then DATABASEHOSTORIP=$LASTDATABASEHOSTORIP; fi
  fi
  # strip all forward slashes
  DATABASEHOSTORIP=`echo "${DATABASEHOSTORIP}" | sed -e "s/\///g"`
  echo ""

  # get port
  echo -n "Database server's port"
  if [ "$LASTDATABASEPORT" ] ; then
    echo -n " [$LASTDATABASEPORT]"
  else
    echo -n " [$DEFAULT_DATABASEPORT]"
  fi
  echo -n ": "
  read DATABASEPORT
  if [ "$DATABASEPORT" == "" ] ; then
    if [ "$LASTDATABASEPORT" ] ; then
      DATABASEPORT=$LASTDATABASEPORT
    else
      DATABASEPORT=$DEFAULT_DATABASEPORT
    fi
  fi
  # strip all forward slashes
  DATABASEPORT=`echo "${DATABASEPORT}" | sed -e "s/\///g"`
  echo ""

  # get the db name
  echo -n "Database name"
  if [ "$LASTDATABASENAME" ] ; then
    echo -n " [$LASTDATABASENAME]"
  else
    echo -n " [ICAT]"
  fi
  echo -n ": "
  read DATABASENAME
  if [ "$DATABASENAME" == "" ] ; then
    if [ "$LASTDATABASENAME" ] ; then
      DATABASENAME=$LASTDATABASENAME
    else
      DATABASENAME="ICAT"
    fi
  fi
  # strip all forward slashes
  DATABASENAME=`echo "${DATABASENAME}" | sed -e "s/\///g"`
  echo ""

  # get database user
  echo -n "Database username"
  if [ "$LASTDATABASEUSER" ] ; then
    echo -n " [$LASTDATABASEUSER]"
  else
    echo -n " [irods]"
  fi
  echo -n ": "
  read DATABASEUSER
  if [ "$DATABASEUSER" == "" ] ; then
    if [ "$LASTDATABASEUSER" ] ; then
      DATABASEUSER=$LASTDATABASEUSER
    else
      DATABASEUSER=irods
    fi
  fi
  # strip all forward slashes
  ADMINUSER=`echo "${DATABASEUSER}" | sed -e "s/\///g"`
  echo ""

  echo -n "Database password: "
  # get db password, without showing on screen
  read -s DATABASEPASSWORD
  echo ""
  echo ""

  # confirm
  echo "-------------------------------------------"
  echo "Database Type:     $DATABASETYPE"
  echo "Hostname or IP:    $DATABASEHOSTORIP"
  echo "Database Port:     $DATABASEPORT"
  echo "Database Name:     $DATABASENAME"
  echo "Database User:     $DATABASEUSER"
  echo "Database Password: Not Shown"
  echo "-------------------------------------------"
  echo -n "Please confirm these settings [yes]: "
  read CONFIRM
  if [ "$CONFIRM" == "" -o "$CONFIRM" == "y" -o "$CONFIRM" == "Y" -o "$CONFIRM" == "yes" ]; then
    STATUS="complete"
  else
    STATUS="loop"
  fi
  echo ""
  echo ""

done
touch $SETUP_DATABASE_FLAG
echo "==================================================================="

IRODS_CONFIG_TEMPFILE="/tmp/$USER/tmp.irods.config"
echo "Updating irods.config..."
sed -e "/^\$DATABASE_TYPE/s/^.*$/\$DATABASE_TYPE = '$DATABASETYPE';/" $IRODS_CONFIG_FILE > $IRODS_CONFIG_TEMPFILE
mv $IRODS_CONFIG_TEMPFILE $IRODS_CONFIG_FILE
sed -e "/^\$DATABASE_HOST/s/^.*$/\$DATABASE_HOST = '$DATABASEHOSTORIP';/" $IRODS_CONFIG_FILE > $IRODS_CONFIG_TEMPFILE
mv $IRODS_CONFIG_TEMPFILE $IRODS_CONFIG_FILE
sed -e "/^\$DATABASE_PORT/s/^.*$/\$DATABASE_PORT = '$DATABASEPORT';/" $IRODS_CONFIG_FILE > $IRODS_CONFIG_TEMPFILE
mv $IRODS_CONFIG_TEMPFILE $IRODS_CONFIG_FILE
sed -e "/^\$DATABASE_ADMIN_NAME/s/^.*$/\$DATABASE_ADMIN_NAME = '$DATABASEUSER';/" $IRODS_CONFIG_FILE > $IRODS_CONFIG_TEMPFILE
mv $IRODS_CONFIG_TEMPFILE $IRODS_CONFIG_FILE
sed -e "/^\$DB_NAME/s/^.*$/\$DB_NAME = '$DATABASENAME';/" $IRODS_CONFIG_FILE > $IRODS_CONFIG_TEMPFILE
mv $IRODS_CONFIG_TEMPFILE $IRODS_CONFIG_FILE

# =-=-=-=-=-=-=-
# update database flavor
if [ "$RUNINPLACE" == "1" ] ;  then
    server_config=$(cd $(dirname DETECTEDDIR); pwd -P )/iRODS/server/config/server.config
else
    server_config="/etc/irods/server.config"
fi

echo ""
echo "# configuration of icat database plugin - e.g. postgres, mysql, or oracle" >> $server_config
echo "catalog_database_type $DATABASETYPE" >> $server_config 
echo ""

# =-=-=-=-=-=-=-
# run irods_setup.pl
cd iRODS
./irodsctl stop
echo ""
echo "-----------------------------"
echo "Running irods_setup.pl..."
perl ./scripts/perl/irods_setup.pl $DATABASETYPE $DATABASEHOSTORIP $DATABASEPORT $DATABASEUSER $DATABASEPASSWORD

# =-=-=-=-=-=-=-
# run update_catalog_schema.py
cd ..
echo ""
echo "-----------------------------"
echo "Running update_catalog_schema.py..."
if [ "$RUNINPLACE" == "1" ] ;  then
    cp ./plugins/database/packaging/update_catalog_schema.py ./packaging/
fi
python ./packaging/update_catalog_schema.py

# =-=-=-=-=-=-=-
# done
exit 0
