# platform detection for CPack.

include_guard(GLOBAL)

# Determine location of distro_distill.py (source tree vs installed)
if (NOT DEFINED IRODS_DISTRO_DISTILL_PATH)
  string(TOUPPER "${PROJECT_NAME}" PROJECT_NAME_UPPER)
  if (PROJECT_NAME_UPPER STREQUAL "IRODS")
    set(IRODS_DISTRO_DISTILL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/scripts/irods/distro_distill.py")
  else()
    set(IRODS_DISTRO_DISTILL_PATH "${CMAKE_CURRENT_LIST_DIR}/distro_distill.py")
  endif()
endif()

if (NOT IRODS_LINUX_DISTRIBUTION_NAME)
  execute_process(
    COMMAND "${IRODS_DISTRO_DISTILL_PATH}" "--distilled-type"
    RESULT_VARIABLE IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME
    OUTPUT_VARIABLE IRODS_LINUX_DISTRIBUTION_NAME
    )
  if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME} STREQUAL "0")
    message(FATAL_ERROR "Linux platform name detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME}")
  endif()
  string(STRIP ${IRODS_LINUX_DISTRIBUTION_NAME} IRODS_LINUX_DISTRIBUTION_NAME)
  set(IRODS_LINUX_DISTRIBUTION_NAME ${IRODS_LINUX_DISTRIBUTION_NAME} CACHE STRING "Linux distribution name, e.g. {ubuntu, centos, ...}." FORCE)
  message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_NAME to '${IRODS_LINUX_DISTRIBUTION_NAME}'")
endif()

if (NOT IRODS_LINUX_DISTRIBUTION_VERSION)
  execute_process(
    COMMAND "${IRODS_DISTRO_DISTILL_PATH}" "--distilled-version"
    RESULT_VARIABLE IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION
    OUTPUT_VARIABLE IRODS_LINUX_DISTRIBUTION_VERSION
    )
  if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION} STREQUAL "0")
    message(FATAL_ERROR "Linux platform version detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION}")
  endif()
  string(STRIP ${IRODS_LINUX_DISTRIBUTION_VERSION} IRODS_LINUX_DISTRIBUTION_VERSION)
  set(IRODS_LINUX_DISTRIBUTION_VERSION ${IRODS_LINUX_DISTRIBUTION_VERSION} CACHE STRING "Linux distribution version number." FORCE)
  message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_VERSION to '${IRODS_LINUX_DISTRIBUTION_VERSION}'")
endif()

if (NOT IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR)
  string(REPLACE "." ";" IRODS_LINUX_DISTRIBUTION_VERSION_LIST "${IRODS_LINUX_DISTRIBUTION_VERSION}")
  list(GET IRODS_LINUX_DISTRIBUTION_VERSION_LIST 0 IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR)
endif()

if (NOT IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME)
  if(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "debian")
    execute_process(
      COMMAND "${IRODS_DISTRO_DISTILL_PATH}" "--distilled-codename"
      RESULT_VARIABLE IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_CODENAME
      OUTPUT_VARIABLE IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME
      )
    if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_CODENAME} STREQUAL "0")
      message(FATAL_ERROR "Linux distro codename detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_CODENAME}")
    endif()
    string(STRIP ${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME} IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME)
    set(IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME ${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME} CACHE STRING "Linux distribution version codename, e.g. {precise, wheezy, trusty, jessie, ...}." FORCE)
    message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME to '${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME}'")
  endif()
endif()

if (NOT CPACK_GENERATOR)
  if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "arch")
    set(CPACK_GENERATOR TGZ CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
    message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
  elseif(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "debian")
    set(CPACK_GENERATOR DEB CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
    message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
  else()
    set(IRODS_SUPPORTED_RPM_BASED_LINUX_DISTRIBUTION_NAMES "rhel" "opensuse" "fedora")
    if(IRODS_LINUX_DISTRIBUTION_NAME IN_LIST IRODS_SUPPORTED_RPM_BASED_LINUX_DISTRIBUTION_NAMES)
      set(CPACK_GENERATOR RPM CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
      message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
    else()
      message(FATAL_ERROR "Failed to set CPACK_GENERATOR for unknown Linux Distribution: ${IRODS_LINUX_DISTRIBUTION_NAME}")
    endif()
  endif()
endif()

set(IRODS_CPACK_GENERATOR ${CPACK_GENERATOR})
