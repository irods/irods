#
# config/platform.mk
#
# Set platform-specific variables for building iRODS.  These variables
# include the name of the C compiler, loader, archiver, and ranlib, plus
# standard compile and link flags.  Many of these variables are set
# differently depending upon the current OS platform.
#

#
# Commands as found by the 'configure' script during iRODS installation
# These can be overridden here (discouraged) or by setting similar
# variables in irods.config before running 'configure'.
#
CC=
CC_IS_GCC=0
CCFLAGS=
LDR=
LDRFLAGS=
RANLIB=
AR=
PERL=


# added by Jason C (updated by Wayne for solaris)
ifneq ($(findstring solaris, $(OS_platform)),)
# On Solaris, still not using g++ (for now) so can't have no-write-flags
else
CCFLAGS += -Wno-write-strings
endif

# show all code that is not reachable
#CCFLAGS += -Wunreachable-code

# =-=-=-=-=-=-=-
# JMC :: build using iRODS Extensions
#     :: currently this is only the microservice plugins
#     :: also enable C++ 0x capabilities
CCFLAGS += -fPIC
LDRFLAGS += -ldl -rdynamic

# =-=-=-=-=-=-=-
# JMC :: BOOST Include & Linking
# use our locally built Boost on the include line
CCFLAGS+=-I$(BOOST_DIR)
CCFLAGS+=-DUSE_BOOST

# =-=-=-=-=-=-=-

# =-=-=-=-=-=-=-
# TGR :: debugging and coverage
IRODS_BUILD_DEBUG=1
ifeq ($(IRODS_BUILD_DEBUG), 1)
CCFLAGS += -g
else
# we'll change this to -O3 later to optimize... hit errors on first attempt
CCFLAGS += -O3
endif

IRODS_BUILD_COVERAGE=0
ifeq ($(IRODS_BUILD_COVERAGE), 1)
CCFLAGS += -fprofile-arcs -ftest-coverage
LDRFLAGS += -lgcov
endif
# =-=-=-=-=-=-=-

ifdef CCFLAGS
MY_CFLAG += $(CCFLAGS)
endif
ifdef LDRFLAGS
LDADD += $(LDRFLAGS)
CL_LDADD += $(LDRFLAGS)
endif





#
# Special memory allocation library
#
ifdef CCMALLOC
LDADD+=$(CCMALLOC_DIR)/obj/ccmalloc-gcc.o -L$(CCMALLOC_DIR)/lib -lccmalloc -ldl -lstdc++
CL_LDADD+=$(CCMALLOC_DIR)/obj/ccmalloc-gcc.o -L$(CCMALLOC_DIR)/lib -lccmalloc -ldl -lstdc++
endif


#
# Embedded PHP
#
ifdef PHP_LIB
AG_LDADD+=-L$(PHP_LIB_DIR) -lphp5
endif


#
# Ar options
#
AROPT= -crs
ifeq ($(OS_platform), osx_platform)
CCFLAGS += -Wno-deprecated
AROPT= -cr
endif


#
# Compiler and loader options
#
LDADD+= -lm -lpthread
CL_LDADD+= -lm -lpthread

ifeq ($(OS_platform), solaris_pc_platform)
OS_platform=solaris_platform
hardware_platform=i86_hardware
endif

# added by Terrell - using system level unixodbc and openssl installation on Solaris
ifeq ($(OS_platform), solaris_platform)
CCFLAGS += -I/opt/csw/include -I/usr/sfw/include -I/opt/csw/gxx/include
LDRFLAGS += -L/opt/csw/lib
endif

# 64-bit file addressing ("large files")
ifeq ($(FILE_64BITS), 1)
ifeq ($(OS_platform), solaris_platform)
MY_CFLAG+=-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
endif
ifeq ($(OS_platform), aix_platform)
MY_CFLAG+=-D_LARGE_FILES
endif
ifeq ($(OS_platform), linux_platform)
MY_CFLAG+=-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE
endif
ifeq ($(OS_platform), osx_platform)
MY_CFLAG+=-D_FILE_OFFSET_BITS=64
endif
endif

# Parallel operations
ifdef PARA_OPR
MY_CFLAG+= -DPARA_OPR=1
endif

# Hardware choices
MY_CFLAG+= -D$(OS_platform)
ifdef hardware_platform
MY_CFLAG+= -D$(hardware_platform)
endif

ifneq ($(OS_platform), osx_platform)
    ifeq ($(CC_IS_GCC), 1)
    MY_CFLAG+=-Wall -Werror
    endif
endif
# Alpha
ifeq ($(OS_platform), alpha_platform)
MY_CFLAGS+=-pthread  -std0 -verbose
endif

# Sun Solaris
ifeq ($(OS_platform), solaris_platform)
LDADD+=-lnsl -lsocket -lm -lpthread -lrt
CL_LDADD+=-lnsl -lsocket -lm -lpthread
endif

# Authorization
ifdef GSI_AUTH
ifeq ($(OS_platform), aix_platform)
LDADD+= $(LIB_GSI_AUTH) $(KRB_LIBS)
CL_LDADD+= $(LIB_GSI_AUTH) $(KRB_LIBS)
else
LDADD+= $(LIB_GSI_AUTH) $(KRB_LIBS) -z muldefs
CL_LDADD+= $(LIB_GSI_AUTH) $(KRB_LIBS) -z muldefs
endif
endif

ifdef HAAW_STRUCT_FILE
MY_CFLAG+= -DHAAW_STRUCT_FILE
endif

ifdef TAR_STRUCT_FILE
MY_CFLAG+= -DTAR_STRUCT_FILE
#ifdef TAR_EXEC_PATH
#ifdef GNU_TAR
MY_CFLAG+= -DGNU_TAR
#endif
MY_CFLAG+= -DTAR_EXEC_PATH=\"$(TAR_EXEC_PATH)\"
#else
MY_CFLAG+= -I$(tarDir) -I$(tarDir)/listhash \
                  -I${tarDir}/lib \
                  -I${tarDir}/compat
#endif
endif

ifdef ZIP_EXEC_PATH
MY_CFLAG+= -DZIP_EXEC_PATH=\"$(ZIP_EXEC_PATH)\"
endif

ifdef UNZIP_EXEC_PATH
MY_CFLAG+= -DUNZIP_EXEC_PATH=\"$(UNZIP_EXEC_PATH)\"
endif


MY_CFLAG+= -I$(libCoreIncDir) -I$(libApiIncDir)        \
		-I$(libMd5IncDir) -I$(libSha1IncDir) -I$(libRbudpIncDir)

ifdef UNI_CODE
MY_CFLAG+= -DUNI_CODE
endif

# server specific LDADD

LDADD += -lcurl

MY_CFLAG+= -I/usr/include/openssl
ifeq ($(OS_platform), linux_platform)
LDADD+=-L/usr/lib/x86_64-linux-gnu/
CL_LDADD+=-L/usr/lib/x86_64-linux-gnu/
endif
LDADD+=-lssl -lcrypto
CL_LDADD+=-lssl -lcrypto

ifdef PAM_AUTH
MY_CFLAG+= -DPAM_AUTH
endif

ifdef PAM_AUTH_CHECK_PROG
MY_CFLAG+= -DPAM_AUTH_CHECK_PROG=\"$(PAM_AUTH_CHECK_PROG)\"
endif

ifdef OS_AUTH
MY_CFLAG+= -DOS_AUTH -DOS_AUTH_KEYFILE=\"$(OS_AUTH_KEYFILE)\"
ifdef OS_AUTH_CMD
MY_CFLAG+= -DOS_AUTH_CMD=\"$(OS_AUTH_CMD)\"
endif
ifdef OS_AUTH_NO_UID
MY_CFLAG+= -DOS_AUTH_NO_UID
endif
endif

ifdef DIRECT_ACCESS_VAULT
MY_CFLAG+= -DDIRECT_ACCESS_VAULT
endif
