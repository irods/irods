#
# config/config.mk
#
# This is the iRODS configuration Makefile included in all other
# Makefiles used to build the servers and clients.
#
# The iRODS configuration script copies config/config.mk.in to
# config/config.mk, filling in its best guesses on the OS platform
# and its features.  You can edit this file by hand to modify
# those guesses.
#

#
# Values filled in by the 'configure' script:
# 	OS_platform	The OS for this build.  Platforms supported:
#				alpha_platform
#				sgi_platform
#				solaris_platform
#				sunos_platform
#				aix_platform
#				osx_platform
#				linux_platform
#
#	FILE_64BITS	Whether 64-bit file sizes are supported.
#
#	RODS_CAT	A 1 to enable the iCAT in the iRODS server.
#
#	PSQICAT		A 1 if the iCAT uses an Postgres database.
#
#	POSTGRES_HOME	The home directory of Postgres, if PSQICAT = 1
#
#	ORAICAT		A 1 if the iCAT uses an Oracle database.
#
#	MYICAT	    A 1 if the iCAT uses an MySQL database.
#
#	ORACLE_HOME	The home directory of Oracle, if ORAICAT = 1
#

#RELEASE_FLAG=1
OS_platform=
#osx_106plus=
FILE_64BITS=1
#RODS_CAT=1
#PSQICAT=1
#POSTGRES_HOME=
#ORAICAT=1
#MYICAT=1
#UNIXODBC_HOME=
#UNIXODBC_DATASOURCE=
ifndef ORACLE_HOME
ORACLE_HOME=
endif

IRODS_BUILD_DIR=
CPU_COUNT=

#external version numbers and associated names
include $(IRODS_BUILD_DIR)/iRODS/config/external_versions.txt

BOOST_DIR=$(IRODS_BUILD_DIR)/external/$(BOOSTVERSION)
LIBARCHIVE_DIR=$(IRODS_BUILD_DIR)/external/$(LIBARCHIVEVERSION)
NETCDF_DIR=$(IRODS_BUILD_DIR)/external/$(NETCDFVERSION)
HDF5_DIR=$(IRODS_BUILD_DIR)/external/$(HDF5VERSION)

#
# Check which database is in use for the iCAT
#
ifdef RODS_CAT

# Postgres
ifdef PSQICAT
PSQ_DBMS =  1
endif

# Oracle
ifdef ORAICAT
ORA_DBMS =  1
endif

# MySQL
ifdef MYICAT
MY_DBMS =  1
endif

endif


#
# Adjust for the Postgres iCAT
#
ifdef PSQICAT
RODS_CAT = 1
PSQ_DBMS = 1
DBMS_INCLUDE+= -DPSQICAT
endif


#
# Adjust for the Oracle iCAT
#
ifdef ORAICAT
RODS_CAT = 1
ORA_DBMS = 1
endif


#
# Adjust for the MySQL iCAT
#
ifdef MYICAT
RODS_CAT = 1
MY_DBMS = 1
endif


#
# Postgres options
#
ifdef PSQ_DBMS
ifeq ($(OS_platform), osx_platform)
NSL=
else
NSL=-lnsl
endif
PSQ_LIB_DIR = $(POSTGRES_HOME)/lib
PSQ_HDR_DIR = $(POSTGRES_HOME)/include
DBMS_LIB+= -L$(PSQ_LIB_DIR) $(NSL) -lm
DBMS_INCLUDE+= -I$(PSQ_HDR_DIR)
endif


#
# Oracle options
#
ifdef ORA_DBMS

ORA_HDR_DIR = $(ORACLE_HOME)/rdbms/public
DBMS_LIB+= -L$(ORACLE_HOME)/lib64 -L$(ORACLE_HOME)/lib -L$(ORACLE_HOME)/lib32 -lclntsh
DBMS_INCLUDE+= -I$(ORA_HDR_DIR)

ifneq ($(findstring /xe/, $(ORACLE_HOME)),)
# For Oracle xe, also need nnz10 library
DBMS_LIB+= -lnnz10
endif

endif

#
# MySQL options
#
ifdef MY_DBMS
ifeq ($(OS_platform), osx_platform)
NSL=
else
NSL=-lnsl
endif
ODBC_LIB_DIR = $(UNIXODBC_HOME)/lib
ODBC_HDR_DIR = $(UNIXODBC_HOME)/include
DBMS_LIB+= -L$(ODBC_LIB_DIR) $(NSL) -lm
DBMS_INCLUDE+= -I$(ODBC_HDR_DIR)
endif

#
# DBR (database-resource) options
#
#DBR=1
ifdef DBR
DBR_TYPE=postgres
POSTGRES_HOME=/tbox/IRODS_BUILD/iRODS/../pgsql
ifeq ($(OS_platform), osx_platform)
NSL=
else
NSL=-lnsl
endif
PSQ_LIB_DIR = $(POSTGRES_HOME)/lib
PSQ_HDR_DIR = $(POSTGRES_HOME)/include
DBMS_LIB+= -L$(PSQ_LIB_DIR) $(NSL) -lm
DBMS_INCLUDE+= -I$(PSQ_HDR_DIR)
# Use lines like these, in place of the Postgres items above 
# (under ifdef DBR), for an Oracle DBR, using values for your
# Oracle installation:
#DBR_TYPE=oracle
#ORACLE_HOME=/usr/local/apps/oracle/home_102
#ORA_LIB_DIR = $(ORACLE_HOME)/lib
#ORA_HDR_DIR = $(ORACLE_HOME)/rdbms/public
#DBMS_LIB+= -L$(ORA_LIB_DIR) -lclntsh
#DBMS_INCLUDE+= -I$(ORA_HDR_DIR)

# Use lines like these, in place of the Postgres items above 
# for mysql:
#DBR_TYPE=mysql
#UNIXODBC_HOME=/usr
#UNIXODBC_DATASOURCE=ICAT
#ifeq ($(OS_platform), osx_platform)
#NSL=
#else
#NSL=-lnsl
#endif
#ODBC_LIB_DIR = $(UNIXODBC_HOME)/lib
#ODBC_HDR_DIR = $(UNIXODBC_HOME)/include
#DBMS_LIB+= -L$(ODBC_LIB_DIR) $(NSL) -lm
#DBMS_INCLUDE+= -I$(ODBC_HDR_DIR)

endif


#
# Misc options
#

# CCMALLOC - specify whether mem leak checking CCMALLOC should be run
# CCMALLOC = 1
ifdef CCMALLOC
CCMALLOC_DIR=/data/mwan/rods/ccmalloc/ccmalloc-0.4.0
endif


# VERBOSE - specify whether to show compilation commands
ifndef VERBOSE
V_at = @
else ifeq ($(VERBOSE),0)
V_at = @
else
V_at =
endif


# IRODS_FS - specify that irodsFuse should be built
# The latest version is 26 for release 2.7. It default to 21 if not defined
IRODS_FS = 1
ifdef IRODS_FS
fuseHomeDir=TEMPLATE_IRODS_FUSE_DIR
endif

# PHP_LIB - specify whether php library will be loaded into irodsAgent.
# Would like to use PHP as a micro-service language
# PHP_LIB = 1
ifdef PHP_LIB
PHP_LIB_DIR=/data/mwan/php/php-5.2.5x/libs
endif

# TAR_STRUCT_FILE - specify whether the tar structured file will be loaded
# into irodsAgent. TAR_EXEC_PATH specifies the path of the tar executable
# is located if the tar executable is to be used for tar operation.
# Otherwise tarDir can be used to specify the directory path of libtar.
# Both TAR_EXEC_PATH  and tarDir should NOT be specified. By default, 
# TAR_EXEC_PATH is on and tarDir is off.
# GNU_TAR -specifies whether the tar execuable is a GNU tar. The default
# is it is a GNU tar
# TAR_EXTENDED_HDR - specify whether the extended header format option (-E) 
# which allows individual file size larger than 8 Gb, is to be used. 
# The default is off since not all tar commands support this option.
TAR_STRUCT_FILE = 1
ifdef TAR_STRUCT_FILE
GNU_TAR=1 
# TAR_EXTENDED_HDR = 1
#ifeq ($(OS_platform), osx_platform)
TAR_EXEC_PATH="`which tar`"
#else
TAR_EXEC_PATH=/bin/tar
#endif
#tarDir=/data/mwan/tar/libtar-1.2.11
endif
# ZIP_EXEC_PATH and UNZIP_EXEC_PATH define the paths of zip/unzip executable.
ZIP_EXEC_PATH=/usr/bin/zip
UNZIP_EXEC_PATH=/usr/bin/unzip


# UNI_CODE - support UTF-8 on linux and UTF-16 on windows
# UNI_CODE = 1

# Syslog logging
# Uncomment this line to log into syslog instead of the usual
# server/log/ log files.
#IRODS_SYSLOG = 1

# =-=-=-=-=-=-=-
# compile in the sha256 support for the hasher class
# NOTE:: this should be a build.sh template value
SHA256_FILE_HASH = 1

# OS_AUTH - build in support for "OS level" authentication. This form
# of authentication uses a shared secret and the genOSAuth command to
# generate a credential that the user presents to the iRODS server.
# You can use this instead of using password authentication.
OS_AUTH = 1
ifdef OS_AUTH
OS_AUTH_KEYFILE = TEMPLATE_IRODS_CONFIG_DIR/irods.key
# Some environments don't have a uniform username/uid
# space between the IES and the clients. Uncomment
# OS_AUTH_NO_UID if this is the case, so the uid will
# not be used when generating the authenticator.
# OS_AUTH_NO_UID = 1
endif

PAM_AUTH_CHECK_PROG=TEMPLATE_IRODS_TOPLEVEL/iRODS/server/bin/PamAuthCheck

# Uncomment the following if you want to disallow extending the
# lifetime of an already existing irods-pam password.  This will also
# change (reduce) the IRODS_PAM_PASSWORD_DEFAULT_TIME and
# IRODS_PAM_PASSWORD_MAX_TIME defined in icatHighLevelRoutines.c.  You
# can edit those values in icatHighLevelRoutines.c to further adjust.
# PAM_AUTH_NO_EXTEND = 1

# DIRECT_ACCESS_VAULT - build in support for a resource type that
# will allow users to directly access files in the vault of this 
# type of resource. Intended for use in environments where there is a
# need for an "iRODS overlay" of an existing high-performance
# filesystem (e.g. a parallel file system NAS). It requires that the
# RUN_SERVER_AS_ROOT feature is turned on.
# DIRECT_ACCESS_VAULT = 1
